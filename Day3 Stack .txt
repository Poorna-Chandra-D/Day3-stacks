import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    /*
     * Complete the equalStacks function below.
     */
    static int equalStacks(int[] h1, int[] h2, int[] h3) {
        int sum1 = 0, sum2 = 0, sum3 = 0;
        for(int i=0;i<h1.length;i++) sum1 += h1[i];
        for(int i=0;i<h2.length;i++) sum2 += h2[i];
        for(int i=0;i<h3.length;i++) sum3 += h3[i];

        if(sum1 == sum2 && sum2 == sum3) return sum1;

        sum1 -= h1[0]; sum2 -= h2[0]; sum3 -= h3[0];
        int index1 = 1, index2 = 1, index3 = 1;
        int maxHeight = Integer.MIN_VALUE;
        while(true) {
            if(sum1 == sum2 && sum2 == sum3){
                maxHeight = sum1;
                break;
            }

            int curMaxHeight = Math.max(sum1, Math.max(sum2, sum3));
            if (curMaxHeight == sum1){
                sum1 -= h1[index1];
                index1++;
            }

            if (curMaxHeight == sum2) {
                sum2 -= h2[index2];
                index2++;
            }

            if (curMaxHeight == sum3){
                sum3 -= h3[index3];
                index3++;
            }
            if (index1 >= h1.length || index2 >= h2.length || index3 >= h3.length ) {
                maxHeight = 0;
                break;
            }
        }

        return maxHeight;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] n1N2N3 = scanner.nextLine().split(" ");

        int n1 = Integer.parseInt(n1N2N3[0].trim());

        int n2 = Integer.parseInt(n1N2N3[1].trim());

        int n3 = Integer.parseInt(n1N2N3[2].trim());

        int[] h1 = new int[n1];

        String[] h1Items = scanner.nextLine().split(" ");

        for (int h1Itr = 0; h1Itr < n1; h1Itr++) {
            int h1Item = Integer.parseInt(h1Items[h1Itr].trim());
            h1[h1Itr] = h1Item;
        }

        int[] h2 = new int[n2];

        String[] h2Items = scanner.nextLine().split(" ");

        for (int h2Itr = 0; h2Itr < n2; h2Itr++) {
            int h2Item = Integer.parseInt(h2Items[h2Itr].trim());
            h2[h2Itr] = h2Item;
        }

        int[] h3 = new int[n3];

        String[] h3Items = scanner.nextLine().split(" ");

        for (int h3Itr = 0; h3Itr < n3; h3Itr++) {
            int h3Item = Integer.parseInt(h3Items[h3Itr].trim());
            h3[h3Itr] = h3Item;
        }

        int result = equalStacks(h1, h2, h3);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
